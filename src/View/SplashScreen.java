/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.GeneralPath;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.Timer;
import javax.swing.plaf.basic.BasicProgressBarUI;


public class SplashScreen extends javax.swing.JDialog {

    /**
     * Creates new form SplashScreen
     */
    public SplashScreen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        getContentPane().setBackground(new Color(221, 221, 221));
        //  To disable key Alt+F4 to close dialog
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        curvesPanel1 = new CurvesPanel();
        jLabel1 = new javax.swing.JLabel();
        pro = new ProgressBarCustom();
        lbStatus = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/loadingIcon.png"))); // NOI18N

        lbStatus.setForeground(new java.awt.Color(200, 200, 200));
        lbStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbStatus.setText("Status");

        javax.swing.GroupLayout curvesPanel1Layout = new javax.swing.GroupLayout(curvesPanel1);
        curvesPanel1.setLayout(curvesPanel1Layout);
        curvesPanel1Layout.setHorizontalGroup(
            curvesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(curvesPanel1Layout.createSequentialGroup()
                .addContainerGap(277, Short.MAX_VALUE)
                .addGroup(curvesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(278, Short.MAX_VALUE))
        );
        curvesPanel1Layout.setVerticalGroup(
            curvesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(curvesPanel1Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(pro, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbStatus)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(curvesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(curvesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    doTask("Connect To Database ...", 10);
                    doTask("LOADING...", 20);
                    doTask("LOADING..", 30);
                    doTask("LOADING.", 40);
                    doTask("LOADING..", 50);
                    doTask("LOADING...", 60);
                    doTask("LOADING..", 70);
                    doTask("LOADING.", 80);
                    doTask("LOADING..", 90);
                    doTask("LOADING...", 100);
                    doTask("DONE", 100);
                    dispose();
                    curvesPanel1.stop();    //  To Stop animation
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }//GEN-LAST:event_formWindowOpened

    private void doTask(String taskName, int progress) throws Exception {
        lbStatus.setText(taskName);
        lbStatus.setFont(new Font("Gill Sans Ultra Bold", Font.PLAIN, 15));
        Thread.sleep(500); //  For Test
        pro.setValue(progress);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SplashScreen dialog = new SplashScreen(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public class GradientPanel extends JPanel {

        private final Color gradientStart;
        private final Color gradientEnd;

        public GradientPanel(Color gradientStart, Color gradientEnd) {
            this.gradientStart = gradientStart;
            this.gradientEnd = gradientEnd;
        }

        @Override
        public void paintComponent(Graphics g) {
            int height = getHeight();
            Graphics2D g2 = (Graphics2D) g;
            GradientPaint painter = new GradientPaint(0, 0, gradientStart,
                    0, height, gradientEnd);
            Paint oldPainter = g2.getPaint();
            g2.setPaint(painter);
            g2.fill(g2.getClip());
            painter = new GradientPaint(0, 0, gradientEnd,
                    0, height / 2, gradientStart);
            g2.setPaint(painter);
            g2.fill(g2.getClip());

            painter = new GradientPaint(0, height / 2, gradientStart,
                    0, height, gradientEnd);
            g2.setPaint(painter);
            g2.fill(g2.getClip());

            g2.setPaint(oldPainter);
        }
    }
    public class ProgressBarCustom extends JProgressBar {
        
        public Color getColorString() {
            return colorString;
        }
        
        public void setColorString(Color colorString) {
            this.colorString = colorString;
        }
        
        private Color colorString = new Color(0, 0, 0);
        
        public ProgressBarCustom() {
            setPreferredSize(new Dimension(100, 5));
            setBackground(new Color(0, 0, 0));
            setForeground(new Color(255, 255, 255));
            setUI(new BasicProgressBarUI() {
                
                @Override
                protected void paintString(Graphics grphcs, int i, int i1, int i2, int i3, int i4, Insets insets) {
                    grphcs.setColor(getColorString());
                    super.paintString(grphcs, i, i1, i2, i3, i4, insets);
                }
            });
        }
    }
    
    public class CurvesPanel extends GradientPanel {

        private RenderingHints hints;
        private int counter = 0;
        private Timer timer = new Timer(20, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                repaint();
            }
        });

        public void start() {
            timer.start();
        }

        public void stop() {
            timer.stop();
        }

        public CurvesPanel() {
            super(Color.decode("#434343"), Color.decode("#000000"));
            hints = new RenderingHints(RenderingHints.KEY_ALPHA_INTERPOLATION,
                    RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
            hints.put(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            hints.put(RenderingHints.KEY_COLOR_RENDERING,
                    RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            hints.put(RenderingHints.KEY_INTERPOLATION,
                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            hints.put(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
            start();
        }

        @Override
        public void paintComponent(Graphics g) {
            counter++;

            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHints(hints);
            super.paintComponent(g2);

            float width = getWidth();
            float height = getHeight();

            g2.translate(0, -30);
            drawCurve(g2,
                    20.0f, -10.0f, 20.0f, -10.0f,
                    width / 2.0f - 40.0f, 10.0f,
                    0.0f, -5.0f,
                    width / 2.0f + 40, 1.0f,
                    0.0f, 5.0f,
                    50.0f, 5.0f, false);
            g2.translate(0, 30);

            g2.translate(0, height - 60);
            drawCurve(g2,
                    30.0f, -15.0f, 50.0f, 15.0f,
                    width / 2.0f - 40.0f, 1.0f,
                    15.0f, -25.0f,
                    width / 2.0f, 1.0f / 2.0f,
                    0.0f, 25.0f,
                    15.0f, 6.0f, false);
            g2.translate(0, -height + 60);

            drawCurve(g2,
                    height - 35.0f, -5.0f, height - 50.0f, 10.0f,
                    width / 2.0f - 40.0f, 1.0f,
                    height - 35.0f, -25.0f,
                    width / 2.0f, 1.0f / 2.0f,
                    height - 20.0f, 25.0f,
                    25.0f, 4.0f, true);
        }

        private void drawCurve(Graphics2D g2,
                float y1, float y1_offset,
                float y2, float y2_offset,
                float cx1, float cx1_offset,
                float cy1, float cy1_offset,
                float cx2, float cx2_offset,
                float cy2, float cy2_offset,
                float thickness,
                float speed,
                boolean invert) {

            float width = getWidth();
            float height = getHeight();

            double offset = Math.sin(counter / (speed * Math.PI));
            float start_x = 0.0f;
            float start_y = y1 + (float) (offset * y1_offset);
            float end_x = width;
            float end_y = y2 + (float) (offset * y2_offset);
            float ctrl1_x = (float) offset * cx1_offset + cx1;
            float ctrl1_y = cy1 + (float) (offset * cy1_offset);
            float ctrl2_x = (float) (offset * cx2_offset) + cx2;
            float ctrl2_y = (float) (offset * cy2_offset) + cy2;

            CubicCurve2D curve = new CubicCurve2D.Double(start_x, start_y, ctrl1_x, ctrl1_y, ctrl2_x, ctrl2_y, end_x, end_y);

            GeneralPath path = new GeneralPath(curve);
            path.lineTo(width, height);
            path.lineTo(0, height);
            path.closePath();

            Area thickCurve = new Area((Shape) path.clone());
            AffineTransform translation = AffineTransform.getTranslateInstance(0, thickness);
            path.transform(translation);
            thickCurve.subtract(new Area(path));

            Color start = new Color(255, 255, 255, 200);
            Color end = new Color(255, 255, 255, 0);

            Rectangle bounds = thickCurve.getBounds();
            GradientPaint painter = new GradientPaint(0, curve.getBounds().y,
                    invert ? end : start,
                    0, bounds.y + bounds.height,
                    invert ? start : end);
            Paint oldPainter = g2.getPaint();
            g2.setPaint(painter);

            g2.fill(thickCurve);

            g2.setPaint(oldPainter);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CurvesPanel curvesPanel1;
    private JLabel jLabel1;
    private JLabel lbStatus;
    private ProgressBarCustom pro;
    // End of variables declaration//GEN-END:variables
}
